/*
 * $Id$
 *
 * Copyright (c) 2004-2009 by the TeXlapse Team.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */

/**
 * A BibTeX parser
 *
 * @author Oskar Ojala
 * @author Boris von Loesch
 */

Package org.eclipse.texlipse.bibparser;

// ----------------------------------------------------------------------------
Helpers

    unicode_input_character = [0..0xffff];
//    ascii_char = [0..0x7f]; // conflict?

    ht = 0x0009;
    lf = 0x000a;
    ff = 0x000c;
    cr = 0x000d;
    sp = ' ';

    ws = [sp + [[ht + lf] + [ff + cr]]];

    line_terminator = lf | cr | cr lf;
    input_character = unicode_input_character;
    input_character_nb = [unicode_input_character - [cr + lf]];
    input_character_nat = [unicode_input_character - '@'];

    q_str_char = [input_character - '"'] | '\"';
    b_str_char = [input_character - [ws + ['{' + '}']]];

    digit = ['0'..'9'];
    letter = ['a'..'z']|['A'..'Z'];
    //punctuation = ':'|'.'|'-'|'+'|'/'|'_';
    not_legal_in_ident = ['"'+['{'+['}'+['('+[')'+[','+['='+'#']]]]]]];
    identifier_character = [input_character - [ws + not_legal_in_ident]]; 

// ----------------------------------------------------------------------------
States

normal, inentry, assign, bracestring, qstring, remove;

// ----------------------------------------------------------------------------
Tokens

    {normal} taskcomment = '%' [sp + ht]* 'TODO' input_character_nb* line_terminator;

    {inentry, assign, bracestring, remove} whitespace = (sp | ht | ff | line_terminator)+;

    {normal->inentry} estring = '@' ['S'+'s'] ['T'+'t'] ['R'+'r'] ['I'+'i'] ['N'+'n'] ['G'+'g'];

    {normal->remove} scribe_comment = '@' ['C'+'c'] ['O'+'o'] ['M'+'m'] ['M'+'m'] ['E'+'e'] ['N'+'n'] ['T'+'t'];
    {normal->remove} preamble = '@' ['P'+'p'] ['R'+'r'] ['E'+'e'] ['A'+'a'] ['M'+'m'] ['B'+'b'] ['L'+'l'] ['E'+'e'];

    {normal->inentry} entry_name = '@' letter+;

    {normal} comment = input_character_nat*;

    {inentry, assign->bracestring, bracestring, remove} l_brace = '{';
    {inentry->normal, assign->normal, bracestring, remove} r_brace = '}';

    {bracestring, remove} b_string = b_str_char+;

    {inentry} l_paren = '(';
    {inentry->normal, assign->normal} r_paren = ')';

//    {normal} at = '@';
    {inentry, assign->inentry} comma = ',';
    {inentry->assign} equals = '=';
    {assign} sharp = '#';

    {assign} number = digit+;
    {inentry, assign} identifier = (identifier_character)+;

    {assign->qstring, qstring->assign} quotec = '"';
    {qstring} string_literal = q_str_char*;

// ----------------------------------------------------------------------------
Ignored Tokens

// we take care of the preamble and scribe comment in the custom lexer
    whitespace,
    comment;

// ----------------------------------------------------------------------------
Productions

/*
bibtex {-> bibtex}
	= string_entry* entry*
	{ -> New bibtex([string_entry.string_entry], [entry.entry])};
*/

bibtex {-> bibtex}
	= bib_entry*
	{-> New bibtex([bib_entry.bib_entry])};

bib_entry {-> bib_entry} =
	{bibstre} string_entry {-> New bib_entry.bibstre(string_entry.string_entry)}
	| {bibe} entry {-> New bib_entry.bibe(entry.entry)}
	| {bibtask} taskcomment {-> New bib_entry.bibtask(taskcomment)};

// d'oh...BibTeX grammar...we could cheat a bit here, but Sable does apparently not make it possible
// to map two different productions to the same AST node (which isn't needed in a WELL DESIGNED grammar
// anyway)...

string_entry {-> string_entry}
	= {strbrace} estring l_brace [ckey]:identifier equals [q1]:quotec? [value]:string_literal [q2]:quotec? r_brace
	{-> New string_entry.strbrace(ckey, value)}
	| {strparen} estring l_paren [ckey]:identifier equals [q1]:quotec? [value]:string_literal [q2]:quotec? r_paren
	{-> New string_entry.strparen(ckey, value)};

entry {-> entry } = {entrybrace} entry_def l_brace [ckey]:identifier keyval_decl+ comma? r_brace
	{-> New entry.entrybrace(entry_def.entry_def, ckey, [keyval_decl.keyval_decl], r_brace)}
	| {entryparen} entry_def l_paren [ckey]:identifier keyval_decl+ comma? r_paren
	{-> New entry.entryparen(entry_def.entry_def, ckey, [keyval_decl.keyval_decl], r_paren)};

entry_def {-> entry_def} = entry_name {-> New entry_def(entry_name)};

keyval_decl {-> keyval_decl } = comma [vkey]:identifier equals val_or_sid concat*
	{->New keyval_decl(vkey, val_or_sid, [concat.concat])};

// We won't match quotes, since it's not a big issue and should be visible by syntax
// highlight in TeXlipse
val_or_sid {-> val_or_sid} = {value_b} string_literal {-> New val_or_sid.value_b(string_literal)}
		| {value_q} [q1]:quotec string_literal? [q2]:quotec {-> New val_or_sid.value_q(string_literal)}
		| {num} number {-> New val_or_sid.num(number)}
		| {id} identifier {-> New val_or_sid.id(identifier)};

concat {-> concat} = sharp val_or_sid {->New concat(val_or_sid)};


// ----------------------------------------------------------------------------
Abstract Syntax Tree

//bibtex = string_entry* entry*;

bibtex = bib_entry*;

bib_entry = {bibstre} string_entry
		| {bibe} entry
		| {bibtask} taskcomment;

string_entry = {strbrace} identifier string_literal | {strparen} identifier string_literal;

entry = {entrybrace} entry_def identifier keyval_decl+ r_brace
		| {entryparen} entry_def identifier keyval_decl+ r_paren;

entry_def = entry_name;

keyval_decl = identifier val_or_sid concat*;

concat = val_or_sid;

val_or_sid = {value_b} string_literal
		| {value_q} string_literal?
		| {num} number
		| {id} identifier;

// ----------------------------------------------------------------------------
