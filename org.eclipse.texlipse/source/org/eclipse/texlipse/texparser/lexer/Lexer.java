/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.eclipse.texlipse.texparser.lexer;

import java.io.*;
import org.eclipse.texlipse.texparser.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.NORMAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                                case 5: state = State.VERB; break;
                                case 4: state = State.VERBATIM; break;
                            }
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.VERBATIM; break;
                                case 0: state = State.VERBATIM; break;
                            }
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 4: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 5: state = State.VERB; break;
                                case 4: state = State.VERBATIM; break;
                            }
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.VERB; break;
                                case 0: state = State.VERB; break;
                            }
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                            }
                            return token;
                        }
                    case 27:
                        {
                            @SuppressWarnings("hiding") Token token = new27(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 28:
                        {
                            @SuppressWarnings("hiding") Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 29:
                        {
                            @SuppressWarnings("hiding") Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.BLOCKCAPT; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 30:
                        {
                            @SuppressWarnings("hiding") Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 31:
                        {
                            @SuppressWarnings("hiding") Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.OPTCAPT; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 32:
                        {
                            @SuppressWarnings("hiding") Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 33:
                        {
                            @SuppressWarnings("hiding") Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 34:
                        {
                            @SuppressWarnings("hiding") Token token = new34(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 35:
                        {
                            @SuppressWarnings("hiding") Token token = new35(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 36:
                        {
                            @SuppressWarnings("hiding") Token token = new36(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 37:
                        {
                            @SuppressWarnings("hiding") Token token = new37(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 38:
                        {
                            @SuppressWarnings("hiding") Token token = new38(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 39:
                        {
                            @SuppressWarnings("hiding") Token token = new39(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWhitespace(text, line, pos); }
    Token new1(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCpart(line, pos); }
    Token new2(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCchapter(line, pos); }
    Token new3(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCsection(line, pos); }
    Token new4(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCssection(line, pos); }
    Token new5(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCsssection(line, pos); }
    Token new6(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCparagraph(line, pos); }
    Token new7(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCbib(text, line, pos); }
    Token new8(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCbibstyle(line, pos); }
    Token new9(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TClabel(line, pos); }
    Token new10(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TChref(line, pos); }
    Token new11(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCref(text, line, pos); }
    Token new12(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCcite(text, line, pos); }
    Token new13(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCbegin(line, pos); }
    Token new14(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCend(line, pos); }
    Token new15(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCinput(line, pos); }
    Token new16(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCinclude(line, pos); }
    Token new17(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCnew(text, line, pos); }
    Token new18(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCrenew(line, pos); }
    Token new19(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCpackage(line, pos); }
    Token new20(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCpindex(line, pos); }
    Token new21(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCpbib(text, line, pos); }
    Token new22(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBverbatim(text, line, pos); }
    Token new23(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEverbatim(text, line, pos); }
    Token new24(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TVtext(text, line, pos); }
    Token new25(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCverb(text, line, pos); }
    Token new26(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TArgument(text, line, pos); }
    Token new27(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOptargument(text, line, pos); }
    Token new28(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TStar(line, pos); }
    Token new29(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLBrace(line, pos); }
    Token new30(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRBrace(line, pos); }
    Token new31(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLBracket(line, pos); }
    Token new32(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRBracket(line, pos); }
    Token new33(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCword(text, line, pos); }
    Token new34(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCsymbol(text, line, pos); }
    Token new35(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCspace(text, line, pos); }
    Token new36(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWord(text, line, pos); }
    Token new37(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSkippedArea(text, line, pos); }
    Token new38(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTaskcomment(text, line, pos); }
    Token new39(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCommentline(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // NORMAL
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 36, 1}, {37, 37, 7}, {38, 90, 1}, {91, 91, 8}, {92, 92, 9}, {93, 93, 10}, {94, 122, 1}, {123, 123, 11}, {124, 124, 1}, {125, 125, 12}, {126, 65535, 1}, },
            {{0, 8, 1}, {11, 12, 1}, {14, 31, 1}, {33, 90, 1}, {94, 122, 1}, {124, 124, 1}, {126, 65535, 1}, },
            {{9, 10, -2}, {12, 12, 13}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{0, 32, -2}, {33, 65535, -3}, },
            {{9, 9, 2}, {10, 10, 14}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 8, 15}, {9, 9, 16}, {10, 10, 17}, {11, 12, 15}, {13, 13, 18}, {14, 31, 15}, {32, 32, 16}, {33, 34, 15}, {35, 35, 19}, {36, 69, 15}, {70, 70, 20}, {71, 83, 15}, {84, 84, 21}, {85, 87, 15}, {88, 88, 22}, {89, 90, 15}, {91, 93, 23}, {94, 122, 15}, {123, 123, 23}, {124, 124, 15}, {125, 125, 23}, {126, 65535, 15}, },
            {},
            {{0, 8, 24}, {9, 9, 25}, {10, 10, 26}, {11, 11, 24}, {12, 12, 27}, {13, 13, 28}, {14, 31, 24}, {32, 32, 29}, {33, 64, 24}, {65, 90, 30}, {91, 96, 24}, {97, 97, 31}, {98, 98, 32}, {99, 99, 33}, {100, 100, 30}, {101, 101, 34}, {102, 103, 30}, {104, 104, 35}, {105, 105, 36}, {106, 107, 30}, {108, 108, 37}, {109, 109, 30}, {110, 110, 38}, {111, 111, 30}, {112, 112, 39}, {113, 113, 30}, {114, 114, 40}, {115, 115, 41}, {116, 116, 30}, {117, 117, 42}, {118, 118, 43}, {119, 122, 30}, {123, 65535, 24}, },
            {},
            {},
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 8, 15}, {9, 9, 23}, {10, 31, -9}, {32, 32, 23}, {33, 90, 15}, {91, 65535, -9}, },
            {{0, 8, 23}, {9, 10, -9}, {11, 12, 23}, {13, 13, 18}, {14, 31, 23}, {32, 32, 16}, {33, 69, 23}, {70, 70, 44}, {71, 83, 23}, {84, 84, 45}, {85, 87, 23}, {88, 88, 46}, {89, 65535, 23}, },
            {},
            {{10, 10, 47}, },
            {{0, 32, -17}, {33, 34, 15}, {35, 35, 48}, {36, 90, 15}, {91, 65535, -9}, },
            {{0, 32, -17}, {33, 72, 15}, {73, 73, 49}, {74, 90, 15}, {91, 65535, -9}, },
            {{0, 32, -17}, {33, 78, 15}, {79, 79, 50}, {80, 90, 15}, {91, 65535, -9}, },
            {{0, 32, -17}, {33, 87, 15}, {88, 88, 51}, {89, 65535, -9}, },
            {{0, 9, 23}, {10, 13, -18}, {14, 65535, 23}, },
            {},
            {},
            {},
            {},
            {{10, 10, 52}, },
            {},
            {{65, 90, 30}, {97, 98, 30}, {99, 99, 53}, {100, 113, 30}, {114, 114, 54}, {115, 122, 30}, },
            {{65, 99, -32}, {100, 100, 55}, {101, 113, 30}, {114, 122, -32}, },
            {{65, 99, -32}, {100, 100, 30}, {101, 101, 56}, {102, 104, 30}, {105, 105, 57}, {106, 113, 30}, {114, 122, -32}, },
            {{65, 99, -32}, {100, 103, 30}, {104, 104, 58}, {105, 105, 59}, {106, 122, -34}, },
            {{65, 99, -32}, {100, 109, 30}, {110, 110, 60}, {111, 113, 30}, {114, 122, -32}, },
            {{65, 113, -32}, {114, 114, 61}, {115, 122, 30}, },
            {{65, 109, -36}, {110, 110, 62}, {111, 122, -36}, },
            {{65, 90, 30}, {97, 97, 63}, {98, 98, 30}, {99, 122, -32}, },
            {{65, 100, -34}, {101, 101, 64}, {102, 113, 30}, {114, 122, -32}, },
            {{65, 90, 30}, {97, 97, 65}, {98, 113, -39}, {114, 114, 66}, {115, 122, 30}, },
            {{65, 100, -34}, {101, 101, 67}, {102, 122, -40}, },
            {{65, 100, -34}, {101, 101, 68}, {102, 114, -40}, {115, 116, 30}, {117, 117, 69}, {118, 122, 30}, },
            {{65, 114, -32}, {115, 115, 70}, {116, 122, 30}, },
            {{65, 100, -34}, {101, 101, 71}, {102, 122, -40}, },
            {{0, 13, -25}, {14, 72, 23}, {73, 73, 72}, {74, 65535, 23}, },
            {{0, 13, -25}, {14, 78, 23}, {79, 79, 73}, {80, 65535, 23}, },
            {{0, 13, -25}, {14, 87, 23}, {88, 88, 74}, {89, 65535, 23}, },
            {},
            {{0, 34, -21}, {35, 35, 75}, {36, 65535, -21}, },
            {{0, 87, -24}, {88, 88, 76}, {89, 65535, -9}, },
            {{0, 32, -17}, {33, 67, 15}, {68, 68, 77}, {69, 90, 15}, {91, 65535, -9}, },
            {{0, 87, -24}, {88, 88, 78}, {89, 65535, -9}, },
            {},
            {{65, 99, -32}, {100, 104, 30}, {105, 105, 79}, {106, 122, -34}, },
            {{65, 100, -34}, {101, 101, 80}, {102, 122, -40}, },
            {{65, 99, -32}, {100, 100, 81}, {101, 122, -33}, },
            {{65, 99, -32}, {100, 102, 30}, {103, 103, 82}, {104, 113, 30}, {114, 122, -32}, },
            {{65, 90, 30}, {97, 97, 30}, {98, 98, 83}, {99, 122, -32}, },
            {{65, 90, 30}, {97, 97, 84}, {98, 122, -39}, },
            {{65, 114, -32}, {115, 115, 30}, {116, 116, 85}, {117, 122, 30}, },
            {{65, 99, -32}, {100, 100, 86}, {101, 122, -33}, },
            {{65, 100, -34}, {101, 101, 87}, {102, 122, -40}, },
            {{65, 98, -32}, {99, 99, 88}, {100, 111, 30}, {112, 112, 89}, {113, 113, 30}, {114, 122, -32}, },
            {{65, 97, -59}, {98, 98, 90}, {99, 122, -32}, },
            {{65, 114, -32}, {115, 118, 30}, {119, 119, 91}, {120, 120, 92}, {121, 122, 30}, },
            {{65, 113, -32}, {114, 114, 93}, {115, 122, 30}, },
            {{65, 101, -56}, {102, 104, 30}, {105, 105, 94}, {106, 110, 30}, {111, 111, 95}, {112, 113, 30}, {114, 122, -32}, },
            {{65, 99, -32}, {100, 101, 30}, {102, 102, 96}, {103, 109, 30}, {110, 110, 97}, {111, 122, -36}, },
            {{65, 98, -32}, {99, 99, 98}, {100, 122, -32}, },
            {{65, 97, -59}, {98, 98, 99}, {99, 122, -32}, },
            {{65, 100, -34}, {101, 101, 100}, {102, 122, -40}, },
            {{65, 113, -32}, {114, 114, 101}, {115, 122, 30}, },
            {{0, 87, -48}, {88, 88, 102}, {89, 65535, 23}, },
            {{0, 13, -25}, {14, 67, 23}, {68, 68, 103}, {69, 65535, 23}, },
            {{0, 87, -48}, {88, 88, 104}, {89, 65535, 23}, },
            {{0, 8, 105}, {9, 9, 106}, {10, 10, 107}, {11, 12, 105}, {13, 13, 108}, {14, 31, 105}, {32, 32, 106}, {33, 36, 105}, {37, 37, 109}, {38, 90, 105}, {91, 93, 106}, {94, 122, 105}, {123, 123, 106}, {124, 124, 105}, {125, 125, 106}, {126, 65535, 105}, },
            {{0, 32, -17}, {33, 76, 15}, {77, 77, 110}, {78, 90, 15}, {91, 65535, -9}, },
            {{0, 78, -23}, {79, 79, 111}, {80, 65535, -23}, },
            {{0, 8, 112}, {9, 9, 113}, {10, 10, 114}, {11, 12, 112}, {13, 13, 115}, {14, 31, 112}, {32, 32, 113}, {33, 90, 112}, {91, 93, 113}, {94, 122, 112}, {123, 123, 113}, {124, 124, 112}, {125, 125, 113}, {126, 65535, 112}, },
            {{65, 115, -61}, {116, 116, 116}, {117, 122, 30}, },
            {{65, 102, -69}, {103, 113, 30}, {114, 122, -32}, },
            {{65, 97, -59}, {98, 98, 117}, {99, 102, -58}, {103, 103, 118}, {104, 122, -58}, },
            {{65, 104, -55}, {105, 105, 119}, {106, 122, -34}, },
            {{65, 97, -59}, {98, 98, 120}, {99, 99, 53}, {100, 107, 30}, {108, 108, 121}, {109, 113, 30}, {114, 122, -32}, },
            {{65, 99, -32}, {100, 111, 30}, {112, 112, 122}, {113, 122, -64}, },
            {{65, 100, -34}, {101, 101, 123}, {102, 122, -40}, },
            {{65, 122, -32}, },
            {{65, 101, -69}, {102, 102, 124}, {103, 122, -82}, },
            {{65, 105, -55}, {106, 107, 30}, {108, 108, 125}, {109, 122, -85}, },
            {{65, 114, -32}, {115, 116, 30}, {117, 117, 126}, {118, 122, 30}, },
            {{65, 100, -34}, {101, 101, 127}, {102, 122, -40}, },
            {{65, 98, -32}, {99, 99, 128}, {100, 122, -32}, },
            {{65, 115, -61}, {116, 116, 129}, {117, 122, 30}, },
            {{65, 90, 30}, {97, 97, 130}, {98, 99, -39}, {100, 114, -56}, {115, 115, 30}, {116, 116, 131}, {117, 122, 30}, },
            {{65, 109, -36}, {110, 110, 132}, {111, 122, -36}, },
            {{65, 114, -32}, {115, 117, 30}, {118, 118, 133}, {119, 122, 30}, },
            {{65, 122, -32}, },
            {{65, 100, -34}, {101, 101, 134}, {102, 122, -40}, },
            {{65, 114, -55}, {115, 115, 30}, {116, 116, 135}, {117, 122, 30}, },
            {{65, 114, -32}, {115, 115, 136}, {116, 122, 30}, },
            {{65, 111, -86}, {112, 112, 137}, {113, 122, -64}, },
            {{65, 97, -59}, {98, 98, 138}, {99, 122, -56}, },
            {{0, 13, -25}, {14, 76, 23}, {77, 77, 139}, {78, 65535, 23}, },
            {{0, 78, -47}, {79, 79, 140}, {80, 65535, 23}, },
            {{0, 9, 113}, {10, 10, 114}, {11, 12, 113}, {13, 13, 115}, {14, 65535, 113}, },
            {{0, 65535, -77}, },
            {{0, 9, 106}, {10, 10, 107}, {11, 12, 106}, {13, 13, 108}, {14, 36, 106}, {37, 37, 141}, {38, 65535, 106}, },
            {{0, 36, 142}, {37, 37, 143}, {38, 65535, 142}, },
            {{0, 9, 142}, {10, 10, 144}, {11, 36, 142}, {37, 65535, -109}, },
            {{0, 8, 145}, {9, 9, 146}, {10, 10, 147}, {11, 12, 145}, {13, 13, 148}, {14, 31, 145}, {32, 32, 146}, {33, 34, 145}, {35, 35, 149}, {36, 36, 145}, {37, 37, 109}, {38, 90, 145}, {91, 93, 146}, {94, 122, 145}, {123, 123, 146}, {124, 124, 145}, {125, 125, 146}, {126, 65535, 145}, },
            {{0, 32, -17}, {33, 68, 15}, {69, 69, 150}, {70, 90, 15}, {91, 65535, -9}, },
            {{0, 65535, -80}, },
            {{0, 65535, -80}, },
            {{0, 65535, -106}, },
            {},
            {{10, 10, 151}, },
            {{65, 100, -34}, {101, 101, 152}, {102, 122, -40}, },
            {{65, 104, -55}, {105, 105, 153}, {106, 122, -34}, },
            {{65, 99, -32}, {100, 107, 30}, {108, 108, 154}, {109, 122, -85}, },
            {{65, 109, -36}, {110, 110, 155}, {111, 122, -36}, },
            {{65, 114, -32}, {115, 120, 30}, {121, 121, 156}, {122, 122, 30}, },
            {{65, 104, -55}, {105, 105, 157}, {106, 122, -34}, },
            {{65, 115, -61}, {116, 116, 158}, {117, 122, 30}, },
            {{65, 90, 159}, {97, 98, 159}, {99, 99, 160}, {100, 113, 159}, {114, 114, 161}, {115, 122, 159}, },
            {{65, 122, -32}, },
            {{65, 116, -91}, {117, 117, 162}, {118, 122, 30}, },
            {{65, 115, -61}, {116, 116, 163}, {117, 122, 30}, },
            {{65, 107, -120}, {108, 108, 164}, {109, 122, -85}, },
            {{65, 105, -55}, {106, 110, 30}, {111, 111, 165}, {112, 122, -68}, },
            {{65, 98, -32}, {99, 99, 166}, {100, 122, -32}, },
            {{65, 102, -58}, {103, 103, 167}, {104, 122, -58}, },
            {{65, 122, -32}, },
            {{65, 115, -61}, {116, 116, 168}, {117, 122, 30}, },
            {{65, 104, -55}, {105, 105, 169}, {106, 122, -34}, },
            {{65, 118, -66}, {119, 119, 170}, {120, 122, 30}, },
            {{65, 104, -55}, {105, 105, 171}, {106, 122, -34}, },
            {{65, 100, -34}, {101, 101, 172}, {102, 116, -43}, {117, 117, 173}, {118, 122, 30}, },
            {{65, 90, 30}, {97, 97, 174}, {98, 122, -39}, },
            {{42, 42, 175}, {65, 122, -32}, },
            {{0, 13, -25}, {14, 68, 23}, {69, 69, 176}, {70, 65535, 23}, },
            {{0, 65535, -106}, },
            {{0, 9, 146}, {10, 10, 147}, {11, 12, 146}, {13, 13, 148}, {14, 34, 146}, {35, 35, 177}, {36, 36, 146}, {37, 37, 141}, {38, 65535, 146}, },
            {{0, 65535, -109}, },
            {{0, 34, 178}, {35, 35, 179}, {36, 36, 178}, {37, 37, 143}, {38, 65535, 178}, },
            {{0, 65535, -109}, },
            {{0, 65535, -77}, },
            {{0, 65535, -108}, },
            {{0, 65535, -109}, },
            {{0, 65535, -110}, },
            {{0, 34, -21}, {35, 35, 180}, {36, 65535, -21}, },
            {{0, 65535, -80}, },
            {},
            {{65, 122, -32}, },
            {{65, 97, -59}, {98, 98, 181}, {99, 122, -32}, },
            {{65, 99, -32}, {100, 110, 30}, {111, 111, 182}, {112, 122, -68}, },
            {{9, 9, 183}, {10, 10, 184}, {12, 12, 185}, {13, 13, 186}, {32, 32, 187}, {65, 122, -32}, {123, 123, 188}, },
            {{65, 98, -32}, {99, 99, 189}, {100, 114, -32}, {115, 115, 190}, {116, 122, 30}, },
            {{65, 110, -156}, {111, 111, 191}, {112, 122, -68}, },
            {{65, 100, -34}, {101, 101, 192}, {102, 122, -40}, },
            {{65, 122, -125}, },
            {{65, 99, -125}, {100, 104, 159}, {105, 105, 193}, {106, 113, 159}, {114, 122, -125}, },
            {{65, 99, -125}, {100, 100, 159}, {101, 101, 194}, {102, 113, 159}, {114, 122, -125}, },
            {{65, 99, -32}, {100, 100, 195}, {101, 122, -33}, },
            {{65, 122, -32}, },
            {{65, 122, -32}, },
            {{65, 99, -32}, {100, 108, 30}, {109, 109, 196}, {110, 113, 30}, {114, 122, -32}, },
            {{65, 104, -55}, {105, 105, 197}, {106, 122, -34}, },
            {{65, 113, -32}, {114, 114, 198}, {115, 122, 30}, },
            {{65, 97, -59}, {98, 98, 199}, {99, 104, -55}, {105, 105, 200}, {106, 122, -34}, },
            {{65, 99, -32}, {100, 100, 201}, {101, 122, -33}, },
            {{65, 98, -32}, {99, 99, 202}, {100, 122, -32}, },
            {{65, 110, -156}, {111, 111, 203}, {112, 122, -68}, },
            {{65, 98, -32}, {99, 99, 204}, {100, 122, -32}, },
            {{65, 97, -59}, {98, 98, 205}, {99, 122, -32}, },
            {{65, 98, -32}, {99, 99, 206}, {100, 122, -32}, },
            {},
            {{0, 65535, -106}, },
            {{0, 13, -25}, {14, 34, 23}, {35, 35, 207}, {36, 65535, 23}, },
            {{0, 65535, -109}, },
            {{35, 35, 208}, },
            {{0, 34, -21}, {35, 35, 209}, {36, 65535, -21}, },
            {{65, 113, -32}, {114, 114, 210}, {115, 122, 30}, },
            {{65, 97, -59}, {98, 98, 211}, {99, 122, -32}, },
            {{9, 32, -157}, {123, 123, 188}, },
            {{9, 123, -185}, },
            {{9, 123, -185}, },
            {{9, 9, 183}, {10, 10, 212}, {12, 123, -185}, },
            {{9, 123, -185}, },
            {{86, 86, 213}, {108, 108, 214}, {118, 118, 215}, },
            {{65, 90, 30}, {97, 97, 216}, {98, 99, -39}, {100, 122, -55}, },
            {{65, 100, -34}, {101, 101, 217}, {102, 122, -40}, },
            {{65, 102, -58}, {103, 103, 218}, {104, 122, -58}, },
            {{65, 113, -32}, {114, 114, 219}, {115, 122, 30}, },
            {{65, 114, -125}, {115, 115, 159}, {116, 116, 220}, {117, 122, 159}, },
            {{65, 99, -125}, {100, 101, 159}, {102, 102, 221}, {103, 113, 159}, {114, 122, -125}, },
            {{65, 100, -34}, {101, 101, 222}, {102, 122, -40}, },
            {{65, 108, -167}, {109, 109, 223}, {110, 122, -167}, },
            {{65, 115, -61}, {116, 116, 224}, {117, 122, 30}, },
            {{65, 90, 30}, {97, 97, 225}, {98, 114, -95}, {115, 122, 30}, },
            {{65, 104, -55}, {105, 105, 226}, {106, 122, -34}, },
            {{65, 109, -36}, {110, 110, 227}, {111, 122, -36}, },
            {{65, 100, -34}, {101, 101, 228}, {102, 122, -40}, },
            {{65, 110, -130}, {111, 111, 229}, {112, 122, -68}, },
            {{65, 109, -36}, {110, 110, 230}, {111, 122, -36}, },
            {{65, 115, -100}, {116, 116, 231}, {117, 122, 30}, },
            {{65, 114, -32}, {115, 115, 232}, {116, 122, 30}, },
            {{65, 105, -55}, {106, 106, 30}, {107, 107, 233}, {108, 113, 30}, {114, 122, -32}, },
            {{0, 34, -179}, {35, 35, 234}, {36, 65535, 23}, },
            {{35, 35, 235}, },
            {{0, 8, 236}, {9, 9, 237}, {10, 10, 238}, {11, 12, 236}, {13, 13, 239}, {14, 31, 236}, {32, 32, 237}, {33, 90, 236}, {91, 93, 237}, {94, 122, 236}, {123, 123, 237}, {124, 124, 236}, {125, 125, 237}, {126, 65535, 236}, },
            {{65, 100, -34}, {101, 101, 240}, {102, 122, -40}, },
            {{65, 90, 30}, {97, 97, 241}, {98, 122, -39}, },
            {{9, 123, -185}, },
            {{101, 101, 242}, },
            {{115, 115, 243}, },
            {{101, 101, 244}, },
            {{65, 115, -61}, {116, 116, 245}, {117, 122, 30}, },
            {{65, 98, -32}, {99, 99, 246}, {100, 102, 30}, {103, 103, 247}, {104, 122, -58}, },
            {{65, 113, -32}, {114, 114, 248}, {115, 122, 30}, },
            {{65, 122, -56}, },
            {{65, 100, -163}, {101, 101, 249}, {102, 122, -163}, },
            {{65, 122, -125}, },
            {{65, 122, -32}, },
            {{65, 90, 30}, {97, 97, 250}, {98, 122, -39}, },
            {{65, 100, -34}, {101, 101, 251}, {102, 122, -40}, },
            {{65, 111, -86}, {112, 112, 252}, {113, 122, -64}, },
            {{65, 97, -59}, {98, 98, 253}, {99, 122, -32}, },
            {{65, 99, -32}, {100, 100, 254}, {101, 122, -33}, },
            {{65, 98, -32}, {99, 99, 255}, {100, 122, -32}, },
            {{65, 108, -167}, {109, 109, 256}, {110, 122, -167}, },
            {{65, 122, -32}, },
            {{65, 104, -55}, {105, 105, 257}, {106, 122, -34}, },
            {{65, 100, -34}, {101, 101, 258}, {102, 122, -40}, },
            {{65, 90, 30}, {97, 97, 259}, {98, 122, -39}, },
            {{0, 9, 237}, {10, 10, 238}, {11, 12, 237}, {13, 13, 239}, {14, 65535, 237}, },
            {{0, 9, 260}, {10, 10, 261}, {11, 12, 260}, {13, 13, 262}, {14, 65535, 260}, },
            {{0, 65535, -211}, },
            {{0, 65535, -236}, },
            {},
            {{10, 10, 263}, },
            {{65, 114, -82}, {115, 115, 264}, {116, 122, 30}, },
            {{65, 107, -120}, {108, 108, 265}, {109, 122, -85}, },
            {{114, 114, 266}, },
            {{116, 116, 267}, },
            {{114, 114, 268}, },
            {{65, 100, -34}, {101, 101, 269}, {102, 122, -40}, },
            {{65, 115, -100}, {116, 116, 270}, {117, 122, 30}, },
            {{65, 108, -167}, {109, 109, 271}, {110, 122, -167}, },
            {{65, 90, 30}, {97, 97, 272}, {98, 122, -200}, },
            {{65, 122, -125}, },
            {{65, 109, -36}, {110, 110, 273}, {111, 122, -36}, },
            {{65, 90, 274}, {97, 98, 274}, {99, 99, 275}, {100, 113, 274}, {114, 114, 276}, {115, 122, 274}, },
            {{65, 103, -35}, {104, 104, 277}, {105, 113, 30}, {114, 122, -32}, },
            {{65, 107, -120}, {108, 108, 278}, {109, 122, -85}, },
            {{65, 100, -34}, {101, 101, 279}, {102, 122, -40}, },
            {{65, 110, -130}, {111, 111, 280}, {112, 122, -68}, },
            {{65, 108, -167}, {109, 109, 281}, {110, 122, -167}, },
            {{65, 110, -156}, {111, 111, 282}, {112, 122, -68}, },
            {{65, 98, -32}, {99, 99, 283}, {100, 122, -32}, },
            {{65, 102, -58}, {103, 103, 284}, {104, 122, -58}, },
            {{0, 65535, -237}, },
            {},
            {{10, 10, 285}, },
            {},
            {{65, 110, -156}, {111, 111, 286}, {112, 122, -68}, },
            {{65, 97, -59}, {98, 98, 287}, {99, 122, -32}, },
            {{98, 98, 288}, },
            {{108, 108, 289}, },
            {{98, 98, 290}, },
            {{65, 102, -58}, {103, 103, 291}, {104, 122, -58}, },
            {{65, 104, -55}, {105, 105, 292}, {106, 122, -34}, },
            {{65, 100, -34}, {101, 101, 293}, {102, 122, -40}, },
            {{65, 111, -86}, {112, 112, 294}, {113, 122, -64}, },
            {{65, 99, -32}, {100, 100, 295}, {101, 122, -33}, },
            {{65, 122, -253}, },
            {{65, 99, -253}, {100, 104, 274}, {105, 105, 296}, {106, 113, 274}, {114, 122, -253}, },
            {{65, 99, -253}, {100, 100, 274}, {101, 101, 297}, {102, 113, 274}, {114, 122, -253}, },
            {{65, 122, -32}, },
            {{65, 104, -55}, {105, 105, 298}, {106, 122, -34}, },
            {{65, 114, -32}, {115, 119, 30}, {120, 120, 299}, {121, 122, 30}, },
            {{65, 108, -167}, {109, 109, 300}, {110, 122, -167}, },
            {{65, 90, 30}, {97, 97, 301}, {98, 122, -39}, },
            {{65, 109, -36}, {110, 110, 302}, {111, 122, -36}, },
            {{65, 115, -100}, {116, 116, 303}, {117, 122, 30}, },
            {{65, 100, -34}, {101, 101, 304}, {102, 122, -40}, },
            {},
            {{65, 116, -91}, {117, 117, 305}, {118, 122, 30}, },
            {{65, 104, -55}, {105, 105, 306}, {106, 122, -34}, },
            {{97, 97, 307}, },
            {{105, 105, 308}, },
            {{97, 97, 309}, },
            {{65, 110, -156}, {111, 111, 310}, {112, 122, -68}, },
            {{65, 110, -156}, {111, 111, 311}, {112, 122, -68}, },
            {{65, 109, -36}, {110, 110, 312}, {111, 122, -36}, },
            {{65, 103, -35}, {104, 104, 313}, {105, 122, -254}, },
            {{65, 122, -32}, },
            {{65, 114, -253}, {115, 115, 274}, {116, 116, 314}, {117, 122, 274}, },
            {{65, 99, -253}, {100, 101, 274}, {102, 102, 315}, {103, 113, 274}, {114, 122, -253}, },
            {{65, 110, -156}, {111, 111, 316}, {112, 122, -68}, },
            {{65, 122, -32}, },
            {{65, 108, -167}, {109, 109, 317}, {110, 122, -167}, },
            {{65, 109, -36}, {110, 110, 318}, {111, 122, -36}, },
            {{65, 122, -32}, },
            {{65, 104, -55}, {105, 105, 319}, {106, 122, -34}, },
            {{65, 122, -32}, },
            {{65, 113, -32}, {114, 114, 320}, {115, 122, 30}, },
            {{65, 97, -59}, {98, 98, 321}, {99, 122, -32}, },
            {{116, 116, 322}, },
            {{115, 115, 323}, },
            {{116, 116, 324}, },
            {{65, 113, -32}, {114, 114, 325}, {115, 122, 30}, },
            {{65, 109, -36}, {110, 110, 326}, {111, 122, -36}, },
            {{65, 115, -61}, {116, 116, 327}, {117, 122, 30}, },
            {{65, 120, -122}, {121, 121, 328}, {122, 122, 30}, },
            {{65, 100, -278}, {101, 101, 329}, {102, 122, -278}, },
            {{65, 122, -253}, },
            {{65, 102, -58}, {103, 103, 330}, {104, 122, -58}, },
            {{65, 90, 30}, {97, 97, 331}, {98, 122, -39}, },
            {{65, 99, -32}, {100, 100, 332}, {101, 122, -33}, },
            {{65, 110, -156}, {111, 111, 333}, {112, 122, -68}, },
            {{65, 98, -32}, {99, 99, 334}, {100, 122, -56}, },
            {{65, 122, -32}, },
            {{105, 105, 335}, },
            {{116, 116, 336}, },
            {{105, 105, 337}, },
            {{65, 114, -56}, {115, 120, 30}, {121, 121, 338}, {122, 122, 30}, },
            {{65, 122, -32}, },
            {{65, 122, -32}, },
            {{65, 114, -32}, {115, 115, 339}, {116, 122, 30}, },
            {{65, 122, -253}, },
            {{65, 113, -32}, {114, 114, 340}, {115, 122, 30}, },
            {{65, 109, -36}, {110, 110, 341}, {111, 122, -36}, },
            {{65, 122, -32}, },
            {{65, 109, -36}, {110, 110, 342}, {111, 122, -36}, },
            {{65, 100, -34}, {101, 101, 343}, {102, 104, 30}, {105, 122, -55}, },
            {{109, 109, 344}, },
            {{105, 105, 345}, },
            {{109, 109, 346}, },
            {{65, 122, -32}, },
            {{65, 115, -61}, {116, 116, 347}, {117, 122, 30}, },
            {{65, 90, 30}, {97, 97, 348}, {98, 122, -200}, },
            {{65, 99, -32}, {100, 100, 349}, {101, 122, -33}, },
            {{65, 122, -32}, },
            {{65, 122, -32}, },
            {{42, 42, 350}, {125, 125, 351}, },
            {{110, 110, 352}, },
            {{42, 125, -346}, },
            {{65, 120, -122}, {121, 121, 353}, {122, 122, 30}, },
            {{65, 111, -86}, {112, 112, 354}, {113, 122, -64}, },
            {{65, 122, -32}, },
            {{125, 125, 355}, },
            {},
            {{103, 103, 356}, },
            {{65, 107, -120}, {108, 108, 357}, {109, 122, -85}, },
            {{65, 103, -35}, {104, 104, 358}, {105, 122, -254}, },
            {},
            {{42, 125, -346}, },
            {{65, 100, -34}, {101, 101, 359}, {102, 122, -40}, },
            {{65, 120, -122}, {121, 121, 360}, {122, 122, 30}, },
            {{65, 122, -32}, },
            {{65, 122, -32}, },
        }
        { // COMCAPT
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 36, 1}, {37, 37, 7}, {38, 41, 1}, {42, 42, 8}, {43, 90, 1}, {91, 91, 9}, {92, 92, 10}, {93, 93, 11}, {94, 122, 1}, {123, 123, 12}, {124, 124, 1}, {125, 125, 13}, {126, 65535, 1}, },
            {{0, 8, 1}, {11, 12, 1}, {14, 31, 1}, {33, 90, 1}, {94, 122, 1}, {124, 124, 1}, {126, 65535, 1}, },
            {{9, 10, -2}, {12, 12, 14}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{0, 32, -2}, {33, 65535, -3}, },
            {{9, 9, 2}, {10, 10, 15}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 8, 16}, {9, 9, 17}, {10, 10, 18}, {11, 12, 16}, {13, 13, 19}, {14, 31, 16}, {32, 32, 17}, {33, 34, 16}, {35, 35, 20}, {36, 69, 16}, {70, 70, 21}, {71, 83, 16}, {84, 84, 22}, {85, 87, 16}, {88, 88, 23}, {89, 90, 16}, {91, 93, 24}, {94, 122, 16}, {123, 123, 24}, {124, 124, 16}, {125, 125, 24}, {126, 65535, 16}, },
            {{0, 65535, -3}, },
            {},
            {{0, 8, 25}, {9, 9, 26}, {10, 10, 27}, {11, 11, 25}, {12, 12, 28}, {13, 13, 29}, {14, 31, 25}, {32, 32, 30}, {33, 64, 25}, {65, 90, 31}, {91, 96, 25}, {97, 97, 32}, {98, 98, 33}, {99, 99, 34}, {100, 100, 31}, {101, 101, 35}, {102, 103, 31}, {104, 104, 36}, {105, 105, 37}, {106, 107, 31}, {108, 108, 38}, {109, 109, 31}, {110, 110, 39}, {111, 111, 31}, {112, 112, 40}, {113, 113, 31}, {114, 114, 41}, {115, 115, 42}, {116, 116, 31}, {117, 117, 43}, {118, 118, 44}, {119, 122, 31}, {123, 65535, 25}, },
            {},
            {},
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 8, 16}, {9, 9, 24}, {10, 31, -9}, {32, 32, 24}, {33, 90, 16}, {91, 65535, -9}, },
            {{0, 8, 24}, {9, 10, -9}, {11, 12, 24}, {13, 13, 19}, {14, 31, 24}, {32, 32, 17}, {33, 69, 24}, {70, 70, 45}, {71, 83, 24}, {84, 84, 46}, {85, 87, 24}, {88, 88, 47}, {89, 65535, 24}, },
            {},
            {{10, 10, 48}, },
            {{0, 32, -18}, {33, 34, 16}, {35, 35, 49}, {36, 90, 16}, {91, 65535, -9}, },
            {{0, 32, -18}, {33, 72, 16}, {73, 73, 50}, {74, 90, 16}, {91, 65535, -9}, },
            {{0, 32, -18}, {33, 78, 16}, {79, 79, 51}, {80, 90, 16}, {91, 65535, -9}, },
            {{0, 32, -18}, {33, 87, 16}, {88, 88, 52}, {89, 65535, -9}, },
            {{0, 9, 24}, {10, 13, -19}, {14, 65535, 24}, },
            {},
            {},
            {},
            {},
            {{10, 10, 53}, },
            {},
            {{65, 90, 31}, {97, 98, 31}, {99, 99, 54}, {100, 113, 31}, {114, 114, 55}, {115, 122, 31}, },
            {{65, 99, -33}, {100, 100, 56}, {101, 113, 31}, {114, 122, -33}, },
            {{65, 99, -33}, {100, 100, 31}, {101, 101, 57}, {102, 104, 31}, {105, 105, 58}, {106, 113, 31}, {114, 122, -33}, },
            {{65, 99, -33}, {100, 103, 31}, {104, 104, 59}, {105, 105, 60}, {106, 122, -35}, },
            {{65, 99, -33}, {100, 109, 31}, {110, 110, 61}, {111, 113, 31}, {114, 122, -33}, },
            {{65, 113, -33}, {114, 114, 62}, {115, 122, 31}, },
            {{65, 109, -37}, {110, 110, 63}, {111, 122, -37}, },
            {{65, 90, 31}, {97, 97, 64}, {98, 98, 31}, {99, 122, -33}, },
            {{65, 100, -35}, {101, 101, 65}, {102, 113, 31}, {114, 122, -33}, },
            {{65, 90, 31}, {97, 97, 66}, {98, 113, -40}, {114, 114, 67}, {115, 122, 31}, },
            {{65, 100, -35}, {101, 101, 68}, {102, 122, -41}, },
            {{65, 100, -35}, {101, 101, 69}, {102, 114, -41}, {115, 116, 31}, {117, 117, 70}, {118, 122, 31}, },
            {{65, 114, -33}, {115, 115, 71}, {116, 122, 31}, },
            {{65, 100, -35}, {101, 101, 72}, {102, 122, -41}, },
            {{0, 13, -26}, {14, 72, 24}, {73, 73, 73}, {74, 65535, 24}, },
            {{0, 13, -26}, {14, 78, 24}, {79, 79, 74}, {80, 65535, 24}, },
            {{0, 13, -26}, {14, 87, 24}, {88, 88, 75}, {89, 65535, 24}, },
            {},
            {{0, 34, -22}, {35, 35, 76}, {36, 65535, -22}, },
            {{0, 87, -25}, {88, 88, 77}, {89, 65535, -9}, },
            {{0, 32, -18}, {33, 67, 16}, {68, 68, 78}, {69, 90, 16}, {91, 65535, -9}, },
            {{0, 87, -25}, {88, 88, 79}, {89, 65535, -9}, },
            {},
            {{65, 99, -33}, {100, 104, 31}, {105, 105, 80}, {106, 122, -35}, },
            {{65, 100, -35}, {101, 101, 81}, {102, 122, -41}, },
            {{65, 99, -33}, {100, 100, 82}, {101, 122, -34}, },
            {{65, 99, -33}, {100, 102, 31}, {103, 103, 83}, {104, 113, 31}, {114, 122, -33}, },
            {{65, 90, 31}, {97, 97, 31}, {98, 98, 84}, {99, 122, -33}, },
            {{65, 90, 31}, {97, 97, 85}, {98, 122, -40}, },
            {{65, 114, -33}, {115, 115, 31}, {116, 116, 86}, {117, 122, 31}, },
            {{65, 99, -33}, {100, 100, 87}, {101, 122, -34}, },
            {{65, 100, -35}, {101, 101, 88}, {102, 122, -41}, },
            {{65, 98, -33}, {99, 99, 89}, {100, 111, 31}, {112, 112, 90}, {113, 113, 31}, {114, 122, -33}, },
            {{65, 97, -60}, {98, 98, 91}, {99, 122, -33}, },
            {{65, 114, -33}, {115, 118, 31}, {119, 119, 92}, {120, 120, 93}, {121, 122, 31}, },
            {{65, 113, -33}, {114, 114, 94}, {115, 122, 31}, },
            {{65, 101, -57}, {102, 110, 31}, {111, 111, 95}, {112, 113, 31}, {114, 122, -33}, },
            {{65, 99, -33}, {100, 101, 31}, {102, 102, 96}, {103, 109, 31}, {110, 110, 97}, {111, 122, -37}, },
            {{65, 98, -33}, {99, 99, 98}, {100, 122, -33}, },
            {{65, 97, -60}, {98, 98, 99}, {99, 122, -33}, },
            {{65, 100, -35}, {101, 101, 100}, {102, 122, -41}, },
            {{65, 113, -33}, {114, 114, 101}, {115, 122, 31}, },
            {{0, 87, -49}, {88, 88, 102}, {89, 65535, 24}, },
            {{0, 13, -26}, {14, 67, 24}, {68, 68, 103}, {69, 65535, 24}, },
            {{0, 87, -49}, {88, 88, 104}, {89, 65535, 24}, },
            {{0, 8, 105}, {9, 9, 106}, {10, 10, 107}, {11, 12, 105}, {13, 13, 108}, {14, 31, 105}, {32, 32, 106}, {33, 36, 105}, {37, 37, 109}, {38, 90, 105}, {91, 93, 106}, {94, 122, 105}, {123, 123, 106}, {124, 124, 105}, {125, 125, 106}, {126, 65535, 105}, },
            {{0, 32, -18}, {33, 76, 16}, {77, 77, 110}, {78, 90, 16}, {91, 65535, -9}, },
            {{0, 78, -24}, {79, 79, 111}, {80, 65535, -24}, },
            {{0, 8, 112}, {9, 9, 113}, {10, 10, 114}, {11, 12, 112}, {13, 13, 115}, {14, 31, 112}, {32, 32, 113}, {33, 90, 112}, {91, 93, 113}, {94, 122, 112}, {123, 123, 113}, {124, 124, 112}, {125, 125, 113}, {126, 65535, 112}, },
            {{65, 115, -62}, {116, 116, 116}, {117, 122, 31}, },
            {{65, 102, -70}, {103, 113, 31}, {114, 122, -33}, },
            {{65, 97, -60}, {98, 98, 117}, {99, 102, -59}, {103, 103, 118}, {104, 122, -59}, },
            {{65, 104, -56}, {105, 105, 119}, {106, 122, -35}, },
            {{65, 99, -33}, {100, 107, 31}, {108, 108, 120}, {109, 113, 31}, {114, 122, -33}, },
            {{65, 99, -33}, {100, 111, 31}, {112, 112, 121}, {113, 122, -65}, },
            {{65, 100, -35}, {101, 101, 122}, {102, 122, -41}, },
            {{65, 122, -33}, },
            {{65, 101, -70}, {102, 102, 123}, {103, 122, -83}, },
            {{65, 105, -56}, {106, 107, 31}, {108, 108, 124}, {109, 122, -86}, },
            {{65, 114, -33}, {115, 116, 31}, {117, 117, 125}, {118, 122, 31}, },
            {{65, 100, -35}, {101, 101, 126}, {102, 122, -41}, },
            {{65, 98, -33}, {99, 99, 127}, {100, 122, -33}, },
            {{65, 115, -62}, {116, 116, 128}, {117, 122, 31}, },
            {{65, 90, 31}, {97, 97, 129}, {98, 99, -40}, {100, 114, -57}, {115, 115, 31}, {116, 116, 130}, {117, 122, 31}, },
            {{65, 114, -33}, {115, 117, 31}, {118, 118, 131}, {119, 122, 31}, },
            {{65, 122, -33}, },
            {{65, 100, -35}, {101, 101, 132}, {102, 122, -41}, },
            {{65, 114, -56}, {115, 115, 31}, {116, 116, 133}, {117, 122, 31}, },
            {{65, 114, -33}, {115, 115, 134}, {116, 122, 31}, },
            {{65, 111, -87}, {112, 112, 135}, {113, 122, -65}, },
            {{65, 97, -60}, {98, 98, 136}, {99, 122, -57}, },
            {{0, 13, -26}, {14, 76, 24}, {77, 77, 137}, {78, 65535, 24}, },
            {{0, 78, -48}, {79, 79, 138}, {80, 65535, 24}, },
            {{0, 9, 113}, {10, 10, 114}, {11, 12, 113}, {13, 13, 115}, {14, 65535, 113}, },
            {{0, 65535, -78}, },
            {{0, 9, 106}, {10, 10, 107}, {11, 12, 106}, {13, 13, 108}, {14, 36, 106}, {37, 37, 139}, {38, 65535, 106}, },
            {{0, 36, 140}, {37, 37, 141}, {38, 65535, 140}, },
            {{0, 9, 140}, {10, 10, 142}, {11, 36, 140}, {37, 65535, -109}, },
            {{0, 8, 143}, {9, 9, 144}, {10, 10, 145}, {11, 12, 143}, {13, 13, 146}, {14, 31, 143}, {32, 32, 144}, {33, 34, 143}, {35, 35, 147}, {36, 36, 143}, {37, 37, 109}, {38, 90, 143}, {91, 93, 144}, {94, 122, 143}, {123, 123, 144}, {124, 124, 143}, {125, 125, 144}, {126, 65535, 143}, },
            {{0, 32, -18}, {33, 68, 16}, {69, 69, 148}, {70, 90, 16}, {91, 65535, -9}, },
            {{0, 65535, -81}, },
            {{0, 65535, -81}, },
            {{0, 65535, -106}, },
            {},
            {{10, 10, 149}, },
            {{65, 100, -35}, {101, 101, 150}, {102, 122, -41}, },
            {{65, 104, -56}, {105, 105, 151}, {106, 122, -35}, },
            {{65, 107, -86}, {108, 108, 152}, {109, 122, -86}, },
            {{65, 109, -37}, {110, 110, 153}, {111, 122, -37}, },
            {{65, 104, -56}, {105, 105, 154}, {106, 122, -35}, },
            {{65, 115, -62}, {116, 116, 155}, {117, 122, 31}, },
            {{65, 90, 156}, {97, 98, 156}, {99, 99, 157}, {100, 113, 156}, {114, 114, 158}, {115, 122, 156}, },
            {{65, 122, -33}, },
            {{65, 116, -92}, {117, 117, 159}, {118, 122, 31}, },
            {{65, 115, -62}, {116, 116, 160}, {117, 122, 31}, },
            {{65, 107, -86}, {108, 108, 161}, {109, 122, -86}, },
            {{65, 105, -56}, {106, 110, 31}, {111, 111, 162}, {112, 122, -69}, },
            {{65, 98, -33}, {99, 99, 163}, {100, 122, -33}, },
            {{65, 102, -59}, {103, 103, 164}, {104, 122, -59}, },
            {{65, 122, -33}, },
            {{65, 104, -56}, {105, 105, 165}, {106, 122, -35}, },
            {{65, 118, -67}, {119, 119, 166}, {120, 122, 31}, },
            {{65, 104, -56}, {105, 105, 167}, {106, 122, -35}, },
            {{65, 100, -35}, {101, 101, 168}, {102, 116, -44}, {117, 117, 169}, {118, 122, 31}, },
            {{65, 90, 31}, {97, 97, 170}, {98, 122, -40}, },
            {{42, 42, 171}, {65, 122, -33}, },
            {{0, 13, -26}, {14, 68, 24}, {69, 69, 172}, {70, 65535, 24}, },
            {{0, 65535, -106}, },
            {{0, 9, 144}, {10, 10, 145}, {11, 12, 144}, {13, 13, 146}, {14, 34, 144}, {35, 35, 173}, {36, 36, 144}, {37, 37, 139}, {38, 65535, 144}, },
            {{0, 65535, -109}, },
            {{0, 34, 174}, {35, 35, 175}, {36, 36, 174}, {37, 37, 141}, {38, 65535, 174}, },
            {{0, 65535, -109}, },
            {{0, 65535, -78}, },
            {{0, 65535, -108}, },
            {{0, 65535, -109}, },
            {{0, 65535, -110}, },
            {{0, 34, -22}, {35, 35, 176}, {36, 65535, -22}, },
            {{0, 65535, -81}, },
            {},
            {{65, 122, -33}, },
            {{65, 97, -60}, {98, 98, 177}, {99, 122, -33}, },
            {{65, 99, -33}, {100, 110, 31}, {111, 111, 178}, {112, 122, -69}, },
            {{9, 9, 179}, {10, 10, 180}, {12, 12, 181}, {13, 13, 182}, {32, 32, 183}, {65, 122, -33}, {123, 123, 184}, },
            {{65, 110, -154}, {111, 111, 185}, {112, 122, -69}, },
            {{65, 100, -35}, {101, 101, 186}, {102, 122, -41}, },
            {{65, 122, -124}, },
            {{65, 99, -124}, {100, 104, 156}, {105, 105, 187}, {106, 113, 156}, {114, 122, -124}, },
            {{65, 99, -124}, {100, 100, 156}, {101, 101, 188}, {102, 113, 156}, {114, 122, -124}, },
            {{65, 99, -33}, {100, 100, 189}, {101, 122, -34}, },
            {{65, 122, -33}, },
            {{65, 122, -33}, },
            {{65, 99, -33}, {100, 108, 31}, {109, 109, 190}, {110, 113, 31}, {114, 122, -33}, },
            {{65, 104, -56}, {105, 105, 191}, {106, 122, -35}, },
            {{65, 113, -33}, {114, 114, 192}, {115, 122, 31}, },
            {{65, 99, -33}, {100, 100, 193}, {101, 122, -34}, },
            {{65, 98, -33}, {99, 99, 194}, {100, 122, -33}, },
            {{65, 110, -154}, {111, 111, 195}, {112, 122, -69}, },
            {{65, 98, -33}, {99, 99, 196}, {100, 122, -33}, },
            {{65, 97, -60}, {98, 98, 197}, {99, 122, -33}, },
            {{65, 98, -33}, {99, 99, 198}, {100, 122, -33}, },
            {},
            {{0, 65535, -106}, },
            {{0, 13, -26}, {14, 34, 24}, {35, 35, 199}, {36, 65535, 24}, },
            {{0, 65535, -109}, },
            {{35, 35, 200}, },
            {{0, 34, -22}, {35, 35, 201}, {36, 65535, -22}, },
            {{65, 113, -33}, {114, 114, 202}, {115, 122, 31}, },
            {{65, 97, -60}, {98, 98, 203}, {99, 122, -33}, },
            {{9, 32, -155}, {123, 123, 184}, },
            {{9, 123, -181}, },
            {{9, 123, -181}, },
            {{9, 9, 179}, {10, 10, 204}, {12, 123, -181}, },
            {{9, 123, -181}, },
            {{86, 86, 205}, {108, 108, 206}, {118, 118, 207}, },
            {{65, 102, -59}, {103, 103, 208}, {104, 122, -59}, },
            {{65, 113, -33}, {114, 114, 209}, {115, 122, 31}, },
            {{65, 114, -124}, {115, 115, 156}, {116, 116, 210}, {117, 122, 156}, },
            {{65, 99, -124}, {100, 101, 156}, {102, 102, 211}, {103, 113, 156}, {114, 122, -124}, },
            {{65, 100, -35}, {101, 101, 212}, {102, 122, -41}, },
            {{65, 108, -164}, {109, 109, 213}, {110, 122, -164}, },
            {{65, 115, -62}, {116, 116, 214}, {117, 122, 31}, },
            {{65, 90, 31}, {97, 97, 215}, {98, 114, -96}, {115, 122, 31}, },
            {{65, 100, -35}, {101, 101, 216}, {102, 122, -41}, },
            {{65, 110, -129}, {111, 111, 217}, {112, 122, -69}, },
            {{65, 109, -37}, {110, 110, 218}, {111, 122, -37}, },
            {{65, 115, -100}, {116, 116, 219}, {117, 122, 31}, },
            {{65, 114, -33}, {115, 115, 220}, {116, 122, 31}, },
            {{65, 105, -56}, {106, 106, 31}, {107, 107, 221}, {108, 113, 31}, {114, 122, -33}, },
            {{0, 34, -175}, {35, 35, 222}, {36, 65535, 24}, },
            {{35, 35, 223}, },
            {{0, 8, 224}, {9, 9, 225}, {10, 10, 226}, {11, 12, 224}, {13, 13, 227}, {14, 31, 224}, {32, 32, 225}, {33, 90, 224}, {91, 93, 225}, {94, 122, 224}, {123, 123, 225}, {124, 124, 224}, {125, 125, 225}, {126, 65535, 224}, },
            {{65, 100, -35}, {101, 101, 228}, {102, 122, -41}, },
            {{65, 90, 31}, {97, 97, 229}, {98, 122, -40}, },
            {{9, 123, -181}, },
            {{101, 101, 230}, },
            {{115, 115, 231}, },
            {{101, 101, 232}, },
            {{65, 113, -33}, {114, 114, 233}, {115, 122, 31}, },
            {{65, 122, -57}, },
            {{65, 100, -160}, {101, 101, 234}, {102, 122, -160}, },
            {{65, 122, -124}, },
            {{65, 122, -33}, },
            {{65, 90, 31}, {97, 97, 235}, {98, 122, -40}, },
            {{65, 100, -35}, {101, 101, 236}, {102, 122, -41}, },
            {{65, 111, -87}, {112, 112, 237}, {113, 122, -65}, },
            {{65, 98, -33}, {99, 99, 238}, {100, 122, -33}, },
            {{65, 108, -164}, {109, 109, 239}, {110, 122, -164}, },
            {{65, 122, -33}, },
            {{65, 104, -56}, {105, 105, 240}, {106, 122, -35}, },
            {{65, 100, -35}, {101, 101, 241}, {102, 122, -41}, },
            {{65, 90, 31}, {97, 97, 242}, {98, 122, -40}, },
            {{0, 9, 225}, {10, 10, 226}, {11, 12, 225}, {13, 13, 227}, {14, 65535, 225}, },
            {{0, 9, 243}, {10, 10, 244}, {11, 12, 243}, {13, 13, 245}, {14, 65535, 243}, },
            {{0, 65535, -203}, },
            {{0, 65535, -224}, },
            {},
            {{10, 10, 246}, },
            {{65, 114, -83}, {115, 115, 247}, {116, 122, 31}, },
            {{65, 107, -86}, {108, 108, 248}, {109, 122, -86}, },
            {{114, 114, 249}, },
            {{116, 116, 250}, },
            {{114, 114, 251}, },
            {{65, 90, 31}, {97, 97, 252}, {98, 122, -194}, },
            {{65, 122, -124}, },
            {{65, 109, -37}, {110, 110, 253}, {111, 122, -37}, },
            {{65, 90, 254}, {97, 98, 254}, {99, 99, 255}, {100, 113, 254}, {114, 114, 256}, {115, 122, 254}, },
            {{65, 103, -36}, {104, 104, 257}, {105, 113, 31}, {114, 122, -33}, },
            {{65, 110, -129}, {111, 111, 258}, {112, 122, -69}, },
            {{65, 108, -164}, {109, 109, 259}, {110, 122, -164}, },
            {{65, 110, -154}, {111, 111, 260}, {112, 122, -69}, },
            {{65, 98, -33}, {99, 99, 261}, {100, 122, -33}, },
            {{65, 102, -59}, {103, 103, 262}, {104, 122, -59}, },
            {{0, 65535, -225}, },
            {},
            {{10, 10, 263}, },
            {},
            {{65, 110, -154}, {111, 111, 264}, {112, 122, -69}, },
            {{65, 97, -60}, {98, 98, 265}, {99, 122, -33}, },
            {{98, 98, 266}, },
            {{108, 108, 267}, },
            {{98, 98, 268}, },
            {{65, 111, -87}, {112, 112, 269}, {113, 122, -65}, },
            {{65, 99, -33}, {100, 100, 270}, {101, 122, -34}, },
            {{65, 122, -238}, },
            {{65, 99, -238}, {100, 104, 254}, {105, 105, 271}, {106, 113, 254}, {114, 122, -238}, },
            {{65, 99, -238}, {100, 100, 254}, {101, 101, 272}, {102, 113, 254}, {114, 122, -238}, },
            {{65, 122, -33}, },
            {{65, 108, -164}, {109, 109, 273}, {110, 122, -164}, },
            {{65, 90, 31}, {97, 97, 274}, {98, 122, -40}, },
            {{65, 109, -37}, {110, 110, 275}, {111, 122, -37}, },
            {{65, 115, -100}, {116, 116, 276}, {117, 122, 31}, },
            {{65, 100, -35}, {101, 101, 277}, {102, 122, -41}, },
            {},
            {{65, 116, -92}, {117, 117, 278}, {118, 122, 31}, },
            {{65, 104, -56}, {105, 105, 279}, {106, 122, -35}, },
            {{97, 97, 280}, },
            {{105, 105, 281}, },
            {{97, 97, 282}, },
            {{65, 103, -36}, {104, 104, 283}, {105, 122, -239}, },
            {{65, 122, -33}, },
            {{65, 114, -238}, {115, 115, 254}, {116, 116, 284}, {117, 122, 254}, },
            {{65, 99, -238}, {100, 101, 254}, {102, 102, 285}, {103, 113, 254}, {114, 122, -238}, },
            {{65, 108, -164}, {109, 109, 286}, {110, 122, -164}, },
            {{65, 109, -37}, {110, 110, 287}, {111, 122, -37}, },
            {{65, 122, -33}, },
            {{65, 104, -56}, {105, 105, 288}, {106, 122, -35}, },
            {{65, 122, -33}, },
            {{65, 113, -33}, {114, 114, 289}, {115, 122, 31}, },
            {{65, 97, -60}, {98, 98, 290}, {99, 122, -33}, },
            {{116, 116, 291}, },
            {{115, 115, 292}, },
            {{116, 116, 293}, },
            {{65, 114, -33}, {115, 120, 31}, {121, 121, 294}, {122, 122, 31}, },
            {{65, 100, -258}, {101, 101, 295}, {102, 122, -258}, },
            {{65, 122, -238}, },
            {{65, 90, 31}, {97, 97, 296}, {98, 122, -40}, },
            {{65, 99, -33}, {100, 100, 297}, {101, 122, -34}, },
            {{65, 110, -154}, {111, 111, 298}, {112, 122, -69}, },
            {{65, 98, -33}, {99, 99, 299}, {100, 122, -57}, },
            {{65, 122, -33}, },
            {{105, 105, 300}, },
            {{116, 116, 301}, },
            {{105, 105, 302}, },
            {{65, 114, -33}, {115, 115, 303}, {116, 122, 31}, },
            {{65, 122, -238}, },
            {{65, 109, -37}, {110, 110, 304}, {111, 122, -37}, },
            {{65, 122, -33}, },
            {{65, 109, -37}, {110, 110, 305}, {111, 122, -37}, },
            {{65, 100, -35}, {101, 101, 306}, {102, 104, 31}, {105, 122, -56}, },
            {{109, 109, 307}, },
            {{105, 105, 308}, },
            {{109, 109, 309}, },
            {{65, 115, -62}, {116, 116, 310}, {117, 122, 31}, },
            {{65, 99, -33}, {100, 100, 311}, {101, 122, -34}, },
            {{65, 122, -33}, },
            {{65, 122, -33}, },
            {{42, 42, 312}, {125, 125, 313}, },
            {{110, 110, 314}, },
            {{42, 125, -309}, },
            {{65, 120, -285}, {121, 121, 315}, {122, 122, 31}, },
            {{65, 122, -33}, },
            {{125, 125, 316}, },
            {},
            {{103, 103, 317}, },
            {{65, 107, -86}, {108, 108, 318}, {109, 122, -86}, },
            {},
            {{42, 125, -309}, },
            {{65, 100, -35}, {101, 101, 319}, {102, 122, -41}, },
            {{65, 122, -33}, },
        }
        { // BLOCKCAPT
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 91, 1}, {92, 92, 7}, {93, 122, 1}, {123, 123, 8}, {124, 124, 1}, {125, 125, 9}, {126, 65535, 1}, },
            {{0, 8, 1}, {11, 12, 1}, {14, 31, 1}, {33, 91, 1}, {93, 122, 1}, {124, 124, 1}, {126, 65535, 1}, },
            {{9, 10, -2}, {12, 12, 10}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{0, 91, -2}, {93, 65535, -3}, },
            {{9, 9, 2}, {10, 10, 11}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 8, 12}, {9, 9, 13}, {10, 10, 14}, {11, 11, 12}, {12, 12, 15}, {13, 13, 16}, {14, 31, 12}, {32, 32, 17}, {33, 64, 12}, {65, 90, 18}, {91, 96, 12}, {97, 122, 18}, {123, 65535, 12}, },
            {},
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {},
            {},
            {},
            {},
            {{10, 10, 19}, },
            {},
            {{65, 90, 18}, {97, 122, 18}, },
            {},
        }
        { // OPTCAPT
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 90, 1}, {91, 91, 7}, {92, 92, 8}, {93, 93, 9}, {94, 122, 1}, {123, 123, 10}, {124, 124, 1}, {125, 125, 11}, {126, 65535, 1}, },
            {{0, 8, 1}, {11, 12, 1}, {14, 31, 1}, {33, 90, 1}, {94, 122, 1}, {124, 124, 1}, {126, 65535, 1}, },
            {{9, 10, -2}, {12, 12, 12}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{0, 90, -2}, {94, 65535, -3}, },
            {{9, 9, 2}, {10, 10, 13}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {},
            {{0, 8, 14}, {9, 9, 15}, {10, 10, 16}, {11, 11, 14}, {12, 12, 17}, {13, 13, 18}, {14, 31, 14}, {32, 32, 19}, {33, 64, 14}, {65, 90, 20}, {91, 96, 14}, {97, 122, 20}, {123, 65535, 14}, },
            {},
            {},
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {},
            {},
            {},
            {},
            {{10, 10, 21}, },
            {},
            {{65, 90, 20}, {97, 122, 20}, },
            {},
        }
        { // VERBATIM
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 91, 1}, {92, 92, 7}, {93, 65535, 1}, },
            {},
            {{9, 10, -2}, {12, 12, 8}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 9, 2}, {10, 10, 9}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{101, 101, 10}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{110, 110, 11}, },
            {{100, 100, 12}, },
            {{123, 123, 13}, },
            {{86, 86, 14}, {108, 108, 15}, {118, 118, 16}, },
            {{101, 101, 17}, },
            {{115, 115, 18}, },
            {{101, 101, 19}, },
            {{114, 114, 20}, },
            {{116, 116, 21}, },
            {{114, 114, 22}, },
            {{98, 98, 23}, },
            {{108, 108, 24}, },
            {{98, 98, 25}, },
            {{97, 97, 26}, },
            {{105, 105, 27}, },
            {{97, 97, 28}, },
            {{116, 116, 29}, },
            {{115, 115, 30}, },
            {{116, 116, 31}, },
            {{105, 105, 32}, },
            {{116, 116, 33}, },
            {{105, 105, 34}, },
            {{109, 109, 35}, },
            {{105, 105, 36}, },
            {{109, 109, 37}, },
            {{42, 42, 38}, {125, 125, 39}, },
            {{110, 110, 40}, },
            {{42, 125, -37}, },
            {{125, 125, 41}, },
            {},
            {{103, 103, 42}, },
            {},
            {{42, 125, -37}, },
        }
        { // VERB
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 65535, 1}, },
            {},
            {{9, 10, -2}, {12, 12, 7}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 9, 2}, {10, 10, 8}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // NORMAL
        {-1, 36, 0, 0, 0, 0, 0, 36, 31, -1, 32, 29, 30, 0, 0, 36, 39, 39, 39, 36, 36, 36, 36, 39, 34, 35, 35, 34, 35, 35, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 39, 39, 39, 39, 36, 36, 36, 36, 35, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 39, 39, 39, 36, 36, 36, 36, 33, 33, 33, 33, 33, 33, 33, 14, 33, 33, 33, 33, 33, 33, 33, 33, 33, 11, 33, 33, 33, 33, 33, 39, 39, 38, 36, 39, 39, 39, 36, 36, 36, 36, 38, 38, 38, 33, 33, 33, 33, 33, 33, 33, 12, 10, 33, 33, 33, 33, 33, 33, 1, 33, 33, 33, 33, 33, 33, 25, 39, 38, 39, -1, -1, 39, 36, 39, 39, 39, 36, 36, 38, 12, 33, 33, 13, 33, 33, 33, 12, 12, 12, 33, 15, 9, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 25, 38, 39, -1, -1, 36, 33, 33, -1, -1, -1, -1, -1, -1, 33, 33, 33, 33, 12, 12, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 39, -1, 36, 33, 33, -1, -1, -1, -1, 33, 33, 33, 2, 12, 11, 16, 33, 33, 33, 33, 33, 33, 33, 3, 33, 33, 33, 37, 37, 36, 37, 37, 37, 33, 33, -1, -1, -1, 33, 33, 33, 33, 12, 33, 12, 33, 33, 33, 33, 33, 33, 33, 33, 37, 37, 37, 37, 33, 33, -1, -1, -1, 33, 33, 33, 33, 33, 12, 12, 12, 6, 33, 33, 33, 33, 33, 33, 33, 37, 33, 33, -1, -1, -1, 33, 33, 33, 33, 17, 12, 12, 33, 20, 33, 33, 4, 33, 19, 33, 33, -1, -1, -1, 33, 33, 33, 33, 12, 11, 33, 33, 33, 33, 33, 7, -1, -1, -1, 33, 21, 21, 7, 12, 33, 33, 18, 33, 33, -1, -1, -1, 21, 33, 33, 33, 5, 7, -1, -1, -1, 33, 33, 17, -1, 22, -1, 33, 33, 22, -1, 33, 33, 8, 21, },
        // COMCAPT
        {-1, 36, 0, 0, 0, 0, 0, 36, 28, 31, -1, 32, 29, 30, 0, 0, 36, 39, 39, 39, 36, 36, 36, 36, 39, 34, 35, 35, 34, 35, 35, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 39, 39, 39, 39, 36, 36, 36, 36, 35, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 39, 39, 39, 36, 36, 36, 36, 33, 33, 33, 33, 33, 33, 33, 14, 33, 33, 33, 33, 33, 33, 33, 33, 11, 33, 33, 33, 33, 33, 39, 39, 38, 36, 39, 39, 39, 36, 36, 36, 36, 38, 38, 38, 33, 33, 33, 33, 33, 33, 12, 10, 33, 33, 33, 33, 33, 33, 1, 33, 33, 33, 33, 33, 25, 39, 38, 39, -1, -1, 39, 36, 39, 39, 39, 36, 36, 38, 12, 33, 33, 13, 33, 33, 12, 12, 12, 33, 15, 9, 33, 33, 33, 33, 33, 33, 33, 33, 33, 25, 38, 39, -1, -1, 36, 33, 33, -1, -1, -1, -1, -1, -1, 33, 33, 12, 12, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 39, -1, 36, 33, 33, -1, -1, -1, -1, 33, 2, 12, 11, 16, 33, 33, 33, 33, 33, 3, 33, 33, 33, 37, 37, 36, 37, 37, 37, 33, 33, -1, -1, -1, 33, 12, 33, 12, 33, 33, 33, 33, 33, 33, 37, 37, 37, 37, 33, 33, -1, -1, -1, 33, 33, 12, 12, 12, 6, 33, 33, 33, 33, 33, 37, 33, 33, -1, -1, -1, 33, 17, 12, 12, 33, 33, 4, 33, 19, 33, 33, -1, -1, -1, 33, 12, 11, 33, 33, 33, 33, 7, -1, -1, -1, 7, 12, 33, 18, 33, 33, -1, -1, -1, 33, 33, 5, 7, -1, -1, -1, 33, 17, -1, 22, -1, 33, 22, -1, 33, 8, },
        // BLOCKCAPT
        {-1, 26, 0, 0, 0, 0, 0, -1, 29, 30, 0, 0, 34, 35, 35, 34, 35, 35, 33, 35, },
        // OPTCAPT
        {-1, 27, 0, 0, 0, 0, 0, 31, -1, 32, 29, 30, 0, 0, 34, 35, 35, 34, 35, 35, 33, 35, },
        // VERBATIM
        {-1, 24, 0, 0, 0, 0, 0, 24, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, 23, -1, },
        // VERB
        {-1, 24, 0, 0, 0, 0, 0, 0, 0, },

    };*/

    public static class State
    {
        public final static State NORMAL = new State(0);
        public final static State COMCAPT = new State(1);
        public final static State BLOCKCAPT = new State(2);
        public final static State OPTCAPT = new State(3);
        public final static State VERBATIM = new State(4);
        public final static State VERB = new State(5);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
